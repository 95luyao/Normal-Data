HotSpot VM对汇编语言的技能要求还是非常高的，否则很多细节你根本就看不懂，比如在解释执行java方法字节码这个完整过程中就涉及大量汇编，hllvm群组里相关问题也问了很多次，我也花了将近半个月才理解字节码解释执行的整个流程，原因主要还是当初掌握的汇编知识太浅了。评论中有我觉得不错的汇编书。
玩技术，两条路: 1. 觉得自己特NB，然后推翻重来自个打地基，有可能成会大师，也有可能等着下一个人来骂你是SB，接着重复1； 2. 先把青春耗进去看别人的地基是怎么打出来的，有些人还没干出点啥就被原有的地基压死了，而有些人能继续垒几块砖。
数据结构和算法有没有用？怎么成为架构师？这类问题问得太多，回得也不烦了。好吧，我做了10多年Java，确实没写过几个算法，快速排序没写过，连折半查找都没写过，这种知识在书面层次懂了就行，如果你要研究开源代码实现那是另一回事。架构师？好吧，我从来都不是架构师。
虽然现在我的重心变成汇编、C/C++了，甚至开始玩Intel的CPU了，但我不得不说这对提升你的Java水平其实没啥帮助，软件发展到现在一层一层往上加，就是在给你设个框，每个人在不同层次的框里玩，每个框都有自己的问题和细节要处理，要是还要关心下面的框的细节，不是你的问题，是设计这个框的人的问题。
人们都普遍喜欢依据自己的经验和做过的事来发表自己对技术的不同看法，用不着让其他所有人都认同你，对待技术，我的个人偏好还是很明显的，我没发现学习C/C++对提高Java水平和处理细节的能力有啥帮助，现在想到的可能就是好比以前像Tomcat这种早期考虑到性能问题用C写了一些模块，现在我有能力看了。
我并没有订阅各类技术博客，研究技术的套路基本上是这样: 先确定研究方向，然后购一批书(为了省钱现在也会找人到学校图书馆借），接着找一到两个相关的、使用度比较广的开源项目，先快速从书本上获取一些知识，然后马上研究代码，期间再细看一些章节，偶尔会看几篇新论文，关注开源项目的邮件列表。
我的关注里多数都是前厂的工友，聊技术的越来越少了，推销云服务倒是勤块了:) 一个有趣的现象是: 走出来的那些前工友倒是有挺多还在时不时发点技术性的东西。技术人员都是武将，打仗(创业)时才有用，和平(大公司)时期就像个没事的人。郎咸平有期节目批评马云乱收购，却不知前厂本就不是一家技术公司！
连续工作10天，然后休息一天(用来翻微博、看球赛、QQ聊天)，所以总会有一些时间是故意用来无聊的，不经历空虚寂寞冷，就不了解工作狂的世界。:)
被热醒，来了些灵感，记录一下: HotSpot与数据库这两个不相关的领域，要说有共性的地方也许就是并发控制了吧，支持多版本的数据库更倾向于使用乐观的并发控制，而HotSpot也如此，有两点值得挖掘：偏向锁在数据库实现中是否有借鉴之处；HotSpot在优化synchronized方法时是否可以对共享字段使用多版本。
几十年过去了，为什么处理器厂商们不努力合伙搞个高级指令集的规范(就像SQL之于RDBMS)？JVM字节码这种级别的就挺合适了，这样上层的编译器、VM开发者多省心啊，JVM的字节码这么稳定，10多年了才增加一条。
玩HotSpot VM(C++、汇编)，俺的大多数时间基本上都耗在图中的几个框中，这种东西玩久了大脑跟机器没差别了，老是围绕寄存器、堆栈、内存转来转去。玩Java更宏观一些，从简单到复杂的框架，从单机到分布式，大脑可以天马行空。对比下来还是觉得玩上层的东西更有趣一些。
我已经有好多年没有在CSDN和ITeye这类国内网站宣传自己做的开源项目了，09年确实在JavaEye上高调的谈论自己做的Douyu，说起Douyu我就觉得羞愧，毕竟是个失败的项目。国内的开源项目一开始多数都是吹得很响的(当然也包括我)，但是少有成功的，失败的原因多是与生存环境、是否持续投入有关。
如果要宣传自己的开源项目的优势是性能更快，其实最有说服力的不是测试报告中的数字和图表，而是先从理论上说明你的设计或算法为什么比原来的快，理论先行，测试在后，这基本上就写论文的套路了。
如果要宣传自己的开源项目的优势是性能更快，其实最有说服力的不是测试报告中的数字和图表，而是先从理论上说明你的设计或算法为什么比原来的快，理论先行，测试在后，这基本上就是写论文的套路了。
修改、调试HotSpot里的汇编代码就是恶梦，比如要实现前条微博提到的功能就需要涉及zerolocals method entry point的汇编: http://t.cn/RPva9XP
还有最后11周，提前修改名字后面的年份啦，2014年注定迎来技术生涯的第二个重大转折点。2001年毕业，直到2009年才迎来第一个转折: 从重复做着简单CRUD业务系统的码农成功转型为Java框架和中间件码农。码农一直是用来自嘲的，以后不称码农了，要做一个合格的研究人员，希望能通过创造新技术实现盈利。:)
常有网友问我是不是在做类似Source Insight之类的工具(今天又有人给我介绍了Architexa)，这些都只是静态分析工具，通过编译器分析一下就能实现了，基本上都能提供类图、序列图，这类静态技术是有局限的，只能了解表面的东西，比如遇到Java中的反射，序列图就衔接不起来了，更别提多线程相关的。
JVM相关技术问题推荐到HLLVM群组看看 http://t.cn/ashKzN 里面可以搜索的，现有内容已经挺丰富了，提问前请搜索一下有没有相关主题，若是没有请直接发新贴，会有很多热心人回复的，我现在也常去。所以请别在微博私信或评论里向我提问了，要么忘记看，要么很久才回复。
花时间用心做无偿技术答疑的人都是天使，好比@RednaxelaFX ，很多回复要是换我光是打完字不动脑就花上两小时，所以提问者更别把自己当爷了，要懂得提问，先搜索，别问太基础的问题，也别问很大很抽象的问题，很多“老人”更愿意回答“点醒式的提问”: 就是那种你还差一点就解决的问题只是被卡在某处了
家人有时表面上可能支持你的选择，说不定他们内心还是希望你做点稳定的事的。前几天偷听到我妈跟我姐的对话，我才知道她们的真实想法，挺触动的。农村确实有很多老旧的观念: 30岁后还不成家会被说闲话，放着2万以上月薪的工作不做是不正常的，各种攀比心理……都很现实，没几个人愿意看远点。
最近不知何故，可能是有点敏感，负能量挺多: 有天在路上碰到一房东，我很惊讶她居然认出了我，然后问我是否在读书，找到工作了吗？（也许我看着像无业游民）。10几年以前我刚毕业时租过她的房子大半年，房租100块，因找不到工作，拖欠房租，最后一个月，把水桶脸盆都算进去充当欠款。
桂林有好山有水，所以这里的人普遍比较懒，缺乏创业精神，有个稳定的工作胜过其他。我其实不合众，不管跟老同学还是亲朋好友都没多大的话题，不是我变化太块，是他们都没变，食堂阿姨还跟9年前一样，每天打着一样的菜，房东还是收着不到200块的房租，同学们在抱怨房贷，父母还是更想看房子和儿媳。
明年重新把一部分精力投入数据库领域，Lealone仅是个在H2上修修改改的SQL引擎，玩得太小，适用性太窄，想重新做一个数据库: 没有关系、没有SQL、不需要ORM框架、不需要JDBC规范。5年后的新数据库具体会是什么样子？不知道，我只隐约看到JVM、程序设计语言、数据库这三者之间的交集越来越多了。
很想破口大骂，却没力气了，我想要个这样的家: 每个人都很平和，每个人都不会带给彼此烦恼。哪怕能持续一年这样的状态都好，可是，好难啊，活了30多年了都没找到！
可怜之人必有可狠之处，放到一个家庭也如此，霉神光顾某个人或家庭都是有原因的，多是父母对子女的错误教育埋下的祸根，身边有太多这样的惨痛家庭。我们家也如此，父母从小对我弟就娇生惯养，就是个麻烦制造机，根本停不下来。每次看到同学，生完孩子不到两岁就扔给父母外出工作，这比溺爱更可怕！
在技术社区里回答一些初学者的问题，其实我觉得用引导性的方式更好：告诉他们弄懂这个问题要哪些基础，向他们提示问题解决过程中可能的关键点，根据异常信息和行号自己去定位问题。洋洋洒洒把结果直接写出来一大篇不一定是好事，不但浪费自己的时间，对他们解决问题的能力也不会有多大提高。
理解HotSpot代码最重要的一条是: 理解oops内存布局的变化、理解执行字节码时堆栈的变化。这条规则实在是太重要了，我绕了一大圈才发现这就是代码中隐藏的套路。不理解这一条的，我认为你还不够了解HotSpot。这也是分析上层JVM语言的基础。
农村其实有挺多不错的苗子，最后不是被家庭就是被教育糟蹋了。我有个小学、初中同学，他坐我前桌，父母给他取了个名字叫“文理”，希望他在文科和理科方面都能有所建树，数理化方面在我看来就是天才，上课总是看小说，常被老师打，但数理化还是考得很好，就是英语相当挫。
下午7点跑步回来，从路边买了块冰西瓜，感觉被卖西瓜的女子调戏了…… 女: 要两块的还是1块5的？我: 两块的。女: 两块的又大又甜。然后见她抬起大腿，指着说道：姐现在穿了条哈喽key踢的短裤，等下去游泳呢。
好吧，问个扫兴的问题: 你有没有被女人调戏过？在我学生那个青葱时代似乎有过，记忆有点模糊。4小时前被一女子调戏，现在还挺郁闷。[汗] 没开玩笑，此刻，俺很严肃的说。
今天事多，再分享一条。小城市的自卑感能体现在一个病例本中！最近皮肤有点小过敏，中午去了一家2甲医院看病，因为我习惯性的把前家公司的医保病历本带上，每次看病都有记录。这回是一个实习小姑娘和一个中年医生，一看我的病例本上面写着杭州，就说霸气啊，大城市就是好，blabla，这已经是第N次了。
隔三差五就有人来说: 你叫嚣了这么久，还不见结果。 不要去指责说你的人，要理解他们，这就是个浮躁的时代，没多少人花3年甚至10年去做一件事， 哪怕半年都很长。我们班除我之外没人在做技术了，跑步一年多，旁边95%都是新面孔。做技术与跑步真的太像了，人换了一拨又一拨……
「关键是你要做出成绩来，有吗？什么时候有？」类似这样的话，我已经听过上千遍了，在天朝人眼里成功的标准就是:钱和名利。是，我现在没做出什么成绩，以后也不一定会有。虽然我的起点很低，但我很为过去的努力自豪，我达到了每个阶段设定的目标，我活出了我自己。
我不知道微博还会玩多久，说不定哪天就会删除一切……越长大越孤单……不是因为身边没人，就算粉丝再多，就算每天泡在家人、朋友之间，也还是会感到孤独。有时喜欢坐上公车，从头坐到尾，看着人们上上下下，有时喜欢漫无目的地游走于城市的大街小巷之间……当然，大多数时间都在代码和书本中度过……
到市里图书馆办了个借书证，只要交200块押金，能借8本书，时间是一个月，看不完可以打电话续借。办证过程除了打发票都自动化了，借书还书也自动化了。交了这么多年税，第一次实实在在的感觉到受益了。过去浪费了好几万块钱买书，其实90%的书都适合到图书馆借来看，只有时效性长的理论书才值得买。
我并没有看出国内码农和技术社区这些年的水准有什么提升，回退到10年前甚至5年前至少还有一些可看的技术论坛，现在ITeye的群组最活跃的是电脑DIY和HLLVM。人都去哪了？微博是看热闹的，GitHub只是为了面试晒代码用的。70后老了、80后忙着换尿布了，90、00后不玩技术了吗，在玩什么？
程序员这个群体中多数人我觉得挺适合当好老公啊，腼腆、老实、专一、工资水平也还算可以、又不爱花钱，就是少了一些情趣，但是女人们普遍不爱这样的人！
「让HotSpot生成固定的ReservedSpace地址可以更简单方便的调试汇编代码 ］http://t.cn/RPfLI6W 如果不知道怎么跟踪调试每一条字节码对应的汇编代码，这个不那么完美的小技巧是个最直接最有效的方式。
最近几年国内出了挺多源码分析的书，从Netty、Spring到Redis、HotSpot JVM......每个有点规模的开源项目都可以写一本，看完一本对看另一本并没有多大帮助，因为这不是科学，每个作者只是把自己知道的开源项目讲出来，并没有去探索如何阅读源代码的本质规律，需要出现另一个门捷列夫。
又是一个7.31，辞职整整两周年了......我只想说，一个人，想要自由真的太容易了，你觉得难，只是你放不下……
做研究我现在会刻意避开人多热门的方向，比如同样是研究HotSpot JVM，很显然，GC和JIT编译器才是历史悠久的并且是最活跃的两个大方向，但我没有去攻这两块，因为里面的牛人够多了，我怕我赶不上。
从社会角度探讨技术的影响也挺有意思，就像以前的段子，做同一个项目用一个Ruby码农，换Java要用3个。技术是进步了，但是失业人数增加了。类似的，云计算会让更多人失业或转行，也会让一批特定行业的中小软件公司死去(硬件和维护没油水捞了)，熟悉的几家软件公司开始接外包来的活了(还是手机app的)！
吃饭回来路上，前面两陌生妹子只顾着讲话，其中之一踩到坑，然后紧接着扑通一下，来了个狗吃屎的动作，她旁边的小伙伴还回头看了一下，那心情好像是在说：哎呀，这么丢脸的场面居然让人看见了……[囧]
王垠同学不玩微博是因为被SB玩坏了……俺终于懂了，在微博上混，黑名单里不多躺几具屎体都不好意思说自己是有个性的人……俺上回差点被SB玩坏，还好只是隐藏了一些微博，没删，不然某些SB肯定乐坏了。
要高调还是要低调？第一次辞职后，我低调了4年，这一次我高调了两年了。当我低调时人们时常问我你是不是得了忧郁症得了自闭症？当我高调说我在创业时人们整天问我成功了没有，什么时候会成功？还不出成绩，你是不是在吹牛？这类SB问题一遍又一遍地重复问着。。。这就是【吊丝型自由人】的处境！！！
有些人以为我在编故事哗众取宠，就连前面说桂电的那条微博都有个SB来闹事，新来的啊？我连实验室的图片都发过！还有人来质疑我的技术水平，还能更瞎吗？GitHub、ITeye博客、历史微博都不去看！还有质问我做出什么成绩？嗯，俺读书少(中专生)，别欺负俺，现在只能做到工作一年玩5年，你也行吧？
@徐明明V @zx-dennis 我在看【Clojure编程】http://t.cn/zY88F1t 18章开始之后是不是不是同一个作者翻译的啊，读起来都好拗口，像机器翻译一样。前面的章节就比较顺。
一部分网友对我的印象还停留在这个时代: http://t.cn/aoXAcO 之所以这样，因为很多人只是做web开发，帖子中只不过提出了一种在mvc框架中使用编译技术的方法，当时看起来比较有新意，现在在我看来是没什么难度的，也没有创造出新知识，仅仅是尝试不同工具的组合看看有什么不同效果。
玩了3年微博，今年粉丝数开始出现负增长，这也是我希望看到的。以前发的内容多偏向于工作中用到的，比如讲讲各种开源项目(Tomcat、HBase、Cassandra等等)，而今年偏向于研究了，也不公开，只能偶尔透露一下，很玄乎，所以对码农不会有多大帮助，更适合大学里做科研的人无聊时看看哪些方向可研究。:)
有时在回答技术问题时也是种学习，比如刚有位网友在HLLVM群问【使用Resource Ordering技术解决死锁的问题】http://t.cn/RPJco0m 我没看过Concurrent Programming in Java这书，也不懂Resource Ordering，看他给的Test代码不到5分钟我就看懂了，顺便帮他解惑。
图书馆里除了有老古董之外还有一些怪书，中午去寻了一圈，看到一本【B方法】http://t.cn/zWIyRs5 看书名以为哪个作者在恶搞，仔细一看，译者是裘宗燕，这老者译了挺多语言相关的书，心想又是相关的吧，翻开一看，擦，全是证明，然后就带回来自虐了……
被HotSpot里有关并发和同步的实现代码虐了很久，停不下来……尽管手头放着windows并发编程、多处理器编程艺术、java并发编程实战......没有一本是读着省心的，计算机科学家们在并发这个领域并没有制造出简单美妙的东西，折腾并发这一块真的就是在受虐!
有个疑惑：像HotSpot这样的JVM不溃余力地采用各种优化手段来改进synchronized方法/块的性能，不就是为了让广大Java码农能用synchronized时就别用并发包中的各种锁吗？这里也有篇老文章 http://t.cn/RPXDW65 作者Brian Goetz也倾向于synchronized。
何_登成重回阿里数据库团队，这其实也说明了阿里数据库团队成功转型了: 从早期的Oracle DBA团队一路转型到一个能对数据库进行定制开发的团队。完成这样的转型至少用了8年，这也算是国内技术圈这10年的真实写照：从技术应用到开始有能力进行一些低层的开发。后续将是出理论大师的阶段，只是路还很长!
卖计算机类书籍的实体店在我们这已基本上完蛋了，以前光是图书市场里就有三家店，理工类的大学校内通常都有书店，现在都没活下来，唯一活下来的是桂林书城(以前的新华书店，算不算国企？)，里面有不打折的计算机书，买的人不多。现在我要买书，只能网购，还不如以前在实体店买书划算，这是种退步！
在一家商店买冰的饮料，一时没找到我要的牌子，就去问老板，老板不耐烦的说了一句就在左边，然后补了一句: 是不是整天玩手机啊，这么明显都看不到！我本想说我有点小近视，看他有点年纪，估计子女整天玩手机让他不爽了……其实，我并不玩手机……想想现在，公交车、地铁、食堂……哪里都有低头族……
我是80后，但更像70后，不爱智能手机，也不爱网购，还听罗大佑，就像他在未来的主人翁那首歌中说的:我们不要一个被科学游戏污染的天空，我们不要被你们发明变成电脑儿童。现在多了手机儿童、iPad儿童，我那三岁半的小侄女就玩手机游戏了……我怀念骑在牛背上、放学到河里嬉戏、晚上数星星的童年！
看HotSpot解析字段时对sun.misc.Contended这个annotation做了一些特别处理，搜了一下David Dice的blog: Java @Contended annotation to help reduce false sharing http://t.cn/zj4EH1c 都前年的事了，在1.8才加入，估计知道的人不多。
【Windows并发编程指南】http://t.cn/zWf6WRy 是本需要慢读的书，翻译得也很流畅，当你要了解HotSpot JVM如何在Windows平台实现多线程与并发、同步时，这书是必看的(特别是前6章)。我学得有点晚，天天用Windows，直到今年才去了解Windows内部的东西，以前反而去折腾很少用的Unix环境编程。
1. 通过收集网络资料来学习？2. 还是通过书本来学习？两种方式都有一批追捧者。我两种方式都试过，除非是学习最前沿的在书本中没有的知识我才会选择1，你花一周去搜集资料我都已经看完一本书了。追求时间效率和知识系统性，这就是选择书本的主要原因。如果不想浪费钱或嫌占用空间，可以到图书馆借。
有些码农对Windows很不屑，也会理所当然的认为像我这种类型的人肯定是玩Linux的，好吧，我想说我用Windows XP就用了6年，Windows 7用了3年半了，这3年半从未重装过系统，裸奔，没装啥杀毒软件，通常不关机，用睡眠模式。
技术牛不牛跟表达能力好不好没啥关系，比如，熟悉我的人肯定知道我讲台上的现场表达能力挫得不能再挫，但是从微博上看，又发现我巨能扯(合起来至少也写了30万字了)，这是因为我是有意在微博上训练自己如何在140字内说清一件事，讲台上不擅长，除了心理因素胆怯之外，主要还是训练得少。
又去了漓江游泳，江面欢快的孩子与美女……而游船一条条飘过……每个山洞前总能聚上一大群人，打牌的打牌，下棋的下棋，从洞里吹出的冷风比吹空调还舒畅……这里的人更像银行家和渔夫的故事中的渔夫，人，有时候真的不知道在追求什么，为什么去追求……
HotSpot JVM在Windows x86实现full、load、store fence分别用了【lock add dword ptr [esp], 0】、【mov eax, dword ptr [esp]】、【volatile jint local_dummy = 0】来实现，让我很困惑，Intel x86不是有SFENCE和LFENCE指令吗？
你一定会感到吃惊，连Erlang这种基于消息传递的不共享状态的语言写出的代码都存在竞态条件和数据竞争，这不是我的结论，这是人家的研究结果，见这里: http://t.cn/RP9nRtg Erlang粉丝们怎么看？
Joe Duffy说: Isolation first; immutability second; synchronization last 我想这也是并发编程领域的研究侧重点，侧重从语言层面解决隔离和不变性问题（就像Clojure和Scala做的那样），过去几10年的研究侧重于如何更好的实现同步，走得越来越极端。
感冒进入第三天，只要一换季就必定感冒，都不用看农历我就知道立春、立秋、立冬了……跑步这么久，虽然平时感冒次数大大减少，但是对于换季感冒没啥用！[汗]
我经常被C/C++玩坏！你可以在汇编层随便把esp移动几个位置，然后在C++层就可以把这个位置转成指向任意类的指针。HotSpot里的InterpreterRuntime::monitorenter就是这么干，后面想想esp移动了8个字节，刚好是BasicObjectLock* elem指向的类所占的内存大小！！！
虽说搞IT这一行新知识更新快，要不断学习，但是我发现过去和现在认识的身边的同行不管新人还是老人，每年能看完10本技术书的不到1/10，你身边的也是这样的吗？
图书馆真是个好地方啊，现在完全迷上了，原来还有总金额限制: 借出的书，书面总金额不能超过500块……在校时都没去过学校图书馆，老师没跟我们说过，毕业后也从来不知道市里还有图书馆，无知啊！那几年为没钱买书而发愁，想我这么好学的学生，早知道有图书馆这么个玩意，真不知道今天会变什么样了。
我读书时横跨了两个专业：一个会计一个计算机，所以同学有两个班，总计超过100人。毕业了就不会再主动学习，这是一个很普遍的现象，会计类的更明显，多数人几乎每天都在重复一样的工作，稍有冲劲点的会去考职称然后才看看书，计算机班的多数转行，很难找到像我这样10几年还一直在写代码的。
知乎【高校图书馆是否应该免费对外开放？有何利弊？】http://t.cn/zOa8AsS 北大清华这种就不要凑热闹了，二三线中小城市里的非名校才值得讨论，君不见大学图书馆弄得比市级的公共图书馆还庞大豪华呢，不开放通常只是还没找到赚钱的路子，而不是承载能力不够。
读计算机专业，若不是非名校，在我看来，去不去读也没啥。我好多年以前考研很憋屈，因为是自考专科学历所以很多学校不给报考，所以一气之下就不跟它们玩了……我的技术知识的获取: 50%来自我毕业后看的书或论文，40%来自开源项目的代码研究，同行交流、网络资料、学校教育等等，瓜分剩下的10%。
看到时不时就有网友给我发信息说我这样的经历或学历鼓励了他们，其实我本意不是想当什么励志哥，我非常讨厌这个帽子，我这种性格的人也不适合在某处树立什么光辉形象。为什么连续两晚发这么多微博谈读书？因为我这半年接触的一些年轻人实在太差，不懂得主动学习，刚好回想起很多同学、同事也如此。
为了学习STM(软事务内存)，我玩了一阵Clojure语言 http://t.cn/7qbYq 确实如宣传词所说的: 虽简单，但是强大。优点我就不多啰嗦了，只是还是那个老掉牙的推广普及问题：创始人有那么多才情，为什么非得把漂亮的想法用一门函数式语言来实现，这种类型的语言只能吸引一小搓人，并不符合大众的口味。
罗辑思维、高晓松前后那两档节目都挺不错，锵锵三人行变得很水了
HLLVM群里有些问题问得不错，比如这个: http://t.cn/RPQLfQf 我打了差不多300字，然后顿了一下，不继续打了，打了的也没发出去……因为……呵呵……
现在折腾出一门自己的程序设计语言已经没有什么技术难度，除非你想从零开始把原来GCC、LLVM、JVM、CLR之类的事都做了，Clojure和Scala的成功，说明在JVM之上也是可以玩出花样的。新语言有没有吸引力还是看有没有非常亮的点，如何才算亮，把前一门语言的痛点解决了就很亮。
刚刚第一次看到新生婴儿是什么样，一下子让人有结婚的强烈想法了。:) 4年前我在杭州，侄女出生时不能到医院，这回第一个外甥女的出生我可赶上了，以后等自己当父亲时应该就更加淡定了。另外，高龄产妇其实也没传说中那么可怕，总之今天非常顺利。
最不希望看到的事偏偏会发生……家人拍了些家里砂糖桔果园的一些树叶图片，我看后在网上核对了半天，估计得了黄龙病了，这病就像人得了癌症没法治，还容易传染。投的钱估计又打水飘了，10个月白累了……
有时在想：我适合做什么？我最应该去做什么？不怕您笑话，我想成为E.F.Codd那样的人，提出个新理论，然后改变行业……可是我也常怀疑自己有没有这个能力？我自认为比同行中90%的人都努力，毕业这十几年也并不是一无是处，至少我能轻松找个年薪30万的工作，但想想投入这么多，仅仅解决了自己的问题。
sorry，又刷屏了，我知道说了也没什么用，我也时常感到有心无力，我也知道关注我的人很多不是出生在农村，你们没兴趣也听不懂，但还是克制不住想说……就好比你们要民主要自由农民或许也不懂……
前两年降级论炒得好火，声称从IT界降级到按摩界、现代养殖界、有机蔬果界等等传统行业就能鹤立鸡群。别把别人当傻子了，俺今天泡了一天图书馆，站在农业科学那一堆书前就像一个学前班的儿童。挖个土坑要挖多深多宽多长所要的技术不比你学个快速排序简单。
商业嗅觉这东西跟学历没啥关系，我自己只是在技术研究这方面有一点点优势，商业嗅觉至少目前看来烂得一塌糊涂，在农业上的三次投资都失败了，连把两万块钱放到余额宝都赶上收益率狂跌……
研究技术真玩不过老外！！！之前还想在JVM上实现STM(软事务内存)，不光单机的有Multiverse http://t.cn/RPmZpCc 连集群环境人家都出论文了: http://t.cn/RPmZpCV 事务内存在93年就提出了，当你们在追捧Erlang、Golang、Scala新潮的并发模型时，只不过是在吃C. A. R. Hoare 70年代就留下的冷饭。
当你为自己出来一个新想法而兴奋时，一查开源项目或论文发现别人早就做了，然后你会感到自己很无知，同时又很沮丧：俺出生晚了……
14:10--16:30 黑暗的140分钟！生活就像一部没有剧本的恐怖片，你永远不知道下一次把你吓出冷汗的剧情在何时以何种方式出现……
我这心脏的承受力也快接近临界点了，可怜到只能在微博上释放……从2008年在电话里知道父亲住院，到确诊出癌症然后去世，直到现在6年多了，年年都有那么几件让人冒冷汗的事，有时候恨到咬牙切齿地指着老天爷骂：你TMD的能不能对老子公平点？？？
人一但倒霉起来拦都拦不住，4.30号晚上11点左右我弟去他老婆家莫名被两人打到快动弹不得，然后住院快一个月，官司打到现在都没打完， 去年开始投钱给他种果园，结果前两天告知我果树得黄龙病了，这下他一家人的生计全完蛋了，今天又碰上这事，还有更糟的么？我早已成了主心骨，我当然不能倒！
打官司好累， 来桂林旅游时，去临桂新区游玩时一定要小心。 http://t.cn/RPuit6N
test
我们就像中国社会这30年的缩影：我是大哥，有个亲姐亲弟，还有7个堂弟，堂姐妹也有。 横跨70/80/90后，我姐跟姐夫从初中毕业就一直到城市打工，工作了20多年还是普通的上班族，买不起房，工资永远赶不上房价。我姐比预产期提前两周，直到出生当天姐夫还在为多挣两千块的奶粉钱在隔壁城市工作。
生孩子其实不是小事，没必要省那两三千块钱。我就警告过家人两次最好去一家三甲医院，结果最后硬是不听选了家二甲医院的服务中心。新生儿头两天就喂养困难，结果医生说没事，等到第三天突然脸色发白都休克了才转到大医院抢救，导致现在都还在危险期！这病叫【新生儿呼吸窘迫综合征】外甥女胎龄37周。
不管是人医还是兽医，只要是庸医就害人害兽，如果技能评分是百分制，这两职业的从业者达不到90分就不应该独自给病人看病，试错成本实在是太大了。昨天出的事故至少40%的责任要归到医生身上：太随意，不注重细节。去年我们家养的鸡死得那么多有很大原因也是从家禽兽医那来，啥病都以为是鸡瘟。
跟我的创业合伙人聊了很多，从4.30号起我就预感到会有一系列的家事缠身，加上领导给我们提醒说注册公司简单但是注销却不易，我们还把做NoSQL产品的计划取消掉了，只做代码分析相关的服务只需上线一个网站就够了，所以为了降低风险，公司一直都没注册，继续做是肯定的，但目前的情况至少要延迟1个月了。
把家事爆出来当然不是为了炒作，没什么好炒的，纯粹是为了把微博当宣泄的地方，我现实中这么低调的人，你在微博上知道了也不知道是谁。遇到这些乱七八糟的事其实70%的例子都是人的原因，也有一些社会问题，能引以为鉴就好，对你没用就当笑话看，嫌烦的话最好屏蔽或取消关注。:)
人往往要经过大挫折后才看清自己原来有多糟。我弟的老婆以前就是大大咧咧的样，前年有一天带我侄女回娘家，到市区一家店吃米粉，把侄女搁一边，只顾自己吃，结果回头发现不见人，吓得大哭，冲出店外还好有人看到了给她指了正确的方向，幸好没走远追上了，那人放下小孩就跑了。这类事想起来就捏一把汗。
我不需要编故事，多到信手拈来……荒谬的事也很多：在我小时候20多岁的小堂姑就被远房亲戚拐卖到某省一个很落后的农村(不想报省名，免得引起地域攻击)，被关在一户人家不给出来，被强制当了人家的媳妇。 20多年过去了，我只见她回过三次。
有在农村的生活经历造就了莫言这样的大师，每个农村都是一个江湖，有自己的小帮派，不同的大家庭之间的博弈、暗斗。俺们村的村长选举倒是公平，每家轮流当，开会时那种帮派看得最明显。我父亲的最后遗言居然是: 某某人很毒，别看表面，你们要小心……那年我25，惊呆了，完全没想到那个人……
我现在没事，我很冷静很理性，早已练就出一颗强大的心脏。尽管很多人觉得不可想像，虽暴露了很多家事，但拿捏得还是还有分寸的，深层次的更夸张的不能说的事还有更多！
电话响起……小外甥女还是走了……姐夫让我别过去医院了，免得姐姐见到亲人更伤心……[蜡烛]
虽然医生并没有来得急从小孩父母身上找根源，我也不是中医的绝对反对者，但从来也不是支持者，小孩子生下来体质就这么差，父母肯定有原因。
行了，不扯了，结束了
消失了，只留了两个对外接口: 【Email】: codefollower@gmail.com 【GitHub】: http://t.cn/zYwWJOZ
不需要给我发私信了，正在慢慢适应没有微博的日子，现在一周登录一次，然后会变成一月、半年……少了微博反而更能安静的玩技术。
我知道还有一大部分人关注我的微博主要是关注技术的，若是还想看，直接看我在GitHub上面的blog就可以了 http://t.cn/zRCdu5u 但肯定不像微博的更新频率那么快，而是阶段总结，并且侧重学术。最近因工作需要研究GC和并发编程，blog上面已有记录，这就是我现在技术风格上的转变。
结合Eclipse和Visual Studio，居然能全程调试上层的Java代码到HotSpot VM内部的C/C++代码以及整个OpenJDK了，原来这么简单！！！忍不住上来分享一下: http://t.cn/RhFwcb7 虽简单，但解决了长久以来的大难题，无数艰难的问题(例如多线程并发模拟)都好调试了。
项目顺利进入尾声了，准备选个好日子发布。:)
晚上翻了上百号人的微博，生怕错过了什么……放心了，技术微博已死……若想了解技术热点和趋势，找个国内主流的综合类网站看看首页就够了。我现在平常就做这么几件事: 经营自己的GitHub、看技术书、在CiteSeerX搜论文、在相关技术群组参与讨论或围观。
对于已公开的技术值个毛线钱，守着自己的一亩三分地不放是最愚蠢的，总有聪明人踏过前人的尸体在短时间内超越你多年的技术积累让你心生畏惧，好的技术人要的不是守成，而是不断开拓自己的新领域，让别人有追不上你的赶脚。
我最佩服马云这一点: 即能共苦也能同甘。感谢马云，当领导就当有此等胸怀！昨天跟家人去看房，房子不贵，今天预付订金了，明年把股票全卖了能付过半的房钱。虽错过了当千万富翁的机会，但至少还能资助家人买房，少了些后顾之忧，能更安心的玩技术了，这意外之财也算用对了地方。---真心拍马屁。:)
今年关注的问题是：如何提升学习效率？从书籍、论文的选择，到工具和新技巧的探索，让我不得不重新审视过去十几年的学习方法是否是错误的，比如用了5年时间的javac+editplus研究代码就是件很蠢的事，现在研究新技术的速度这么快到底是时间和技术积累的关系，还是过去的学习方法太烂？
看了48个图灵奖得主的获奖原因，再对比诺贝尔奖，相比下来顿时感觉图灵奖好low也更无趣，数据库相关的两个图灵奖分量还算可以，至少至今还是主流也产生了巨大的商业价值。计算机科学未来能产生有分量的图灵奖的领域也许多半在人工智能领域了吧。
资料收集贴: 【GC的历史综述与最新进展以及在HotSpot VM中的具体实现】http://t.cn/RPec2kW 有时间就多翻点论文，别只顾着刷微博。
研究HotSpot VM整整半年了，时常觉得研究晚了，这事放在工作3年后研究可能在30岁之前更容易做出成绩。2006年SUN公司把JDK开源出来时，正赶上我厌倦考研的时候，然后选择了研究编译器和Javac，没有选HotSpot。呵呵，看似无关紧要的选择却极大的影响了后面8年的技术路线。
还是很看好Oracle Graal VM这个项目的: http://t.cn/RhE5XKy 说不定下个版本的JDK就能集成到HotSpot了，然后HotSpot的JIT编译器就变成用Java写了; 另一个比较帅的地方是实现了一个多语言框架，其他语言更容易在JVM上跑了。以后Java之于JVM就如同C之于OS。
过去我骂过OceanBase，虽然现在不玩NoSQL/RDBMS了，对于任何技术产品，我还是这样的态度: 如果想让严肃的、专业的同行认可你的技术产品，并不会看重你把它用到什么数量级或重量级的业务线，更看重为这个技术领域增加了什么新东西，你的技术产品胜出是因为技术更优秀，还是因为公司更在乎是否是亲生的。
每次折腾HotSpot VM里的汇编代码都让我痛苦不堪，只要超过50行的汇编代码中出现>=5个条件或无条件转移指令，就不得不画出流程图来辅助理解，这就好比在高级语言中烂用goto。想来汇编语言时代的程序员是何等苦逼，Backus是伟大的，解放了汇编程序员。做底层系统有时为了那么点性能，又回到石器时代。
最近收到几位网友来询问Lealone http://t.cn/zY1GTU9 的情况，想要在上面加自己的东西只要遵循一下协议就好了(README文件最后有说明)，另外我今年没时间投到这项目了，目前处于停滞状态，NoSQL的确还有一些可创新的点，但是要创业做这个不但投入大还难赚钱，特别是在国内。
Firefox真是自己作死的节奏，本来启动就慢了，时不时才用一下，老是提示升级，烦了，升吧，自动帮我升到了中文更新的版本， 结果关掉Firefox后，重新打开说已经打开了，原来进程还在，还出来Crash报告窗口，以为是中文问题，卸了装上英文的还是Crash，浪费一小时折腾，好差的体验！彻底卸了！
从在线IDE身上获得了挺多灵感，用这样的方式来做代码的可视化分析比类Google Maps的地图模式好多了。在线IDE因为性能问题还无法取代本地IDE，但是当作代码可视化工具却是一个很棒的前端。
GitHub虽坐拥金山，但这两年还没看到发什么力来挖宝。如果有人在GitHub之上利用它的资源解决“在线教育”问题就很容易取代GitHub的地位。【在线IDE】、【如何学习原有项目的代码】就是两个与“在线教育”相关的问题。只做代码托管，门槛太低。
【女程序员的青春有几年】http://t.cn/R7wmzxk 不怎么逛CSDN，因为不是充斥脑残评论，就是各种老人发的忠告，还有30岁的迷茫。程序员这行还真需要天赋和兴趣，否则别说熬10年了，5年你都难熬。最近，我果断放弃指导我那堂弟了，3个月了都没看完一本入门书，真不是玩程序的料。
我没经历过高考，所以我一直不明白为什么国内的人普遍喜好做题、刷题，早些年我很厌倦考研，一大原因也是因为题太多太变态。现在的在线教育，目标直接对准刷题的也很火，从初、高中到考研，再到垂直类的面向码农的……郎咸平经常在节目上说国内的教育是在培养解题高手而不是培养创造力，也许吧……
在JVM层做代码动态分析，确实要比通过注入字节码的工具库强大，但是有时太精确了也是件麻烦事。比如要分析方法调用过程，要是碰到递归调用或者是在一个循环中调用，这样会产生大量的垃圾重复数据。
基于代码动态分析技术来分析JVM之上的开源项目代码确实爽多了，光是一个是简单的方法调用过程跟踪功能就能玩出很多花样。比如，如果一个类的方法太多，你想快速知道这些方法之间的调用顺序，也可以用这个技术。图中就是我从后台随便取的数据。
很赞，发个正能量鸡汤【过了35岁后，硅谷人会计划做什么呢？】http://t.cn/R7yRC8d 我30岁时还选择从国内最值钱的科技类公司辞职，很多人说我是不是疯了。这两年多的非物质收获远超过去10年，毕业前希望能找到份工作即可，30岁前的目标是希望工资涨快点，30岁后就应该追求更高层次的东西了。
域名指向到国外网站空间，是不用备案的？真是这样吗
如果网站是提供数据服务的，里面的数据很重要，比用户个人资料还重要，放到什么类型的云服务商更合适，现在的服务商是否有保险或担保之类的，比如只要放在服务器上的数据被窃取了，服务商就要赔偿多倍的金钱损失。
原本是把 @CodeFollower 当成公司微博的，写着写着又完全转成个人风格了，还是改回个人名字吧，公司微博应该让更平和更友善的人来管。[害羞]
一口气买了5个其他后缀的域名，幸好没被其他人注册，如果看到好域名，光买下com是远远不够的，我没想到org域名这么贵，是com和net的三倍了，cn域名要审查资料。
如果微博阅读数准的话，我的每条微博阅读数平均在4000左右，晚上10点到11点半看的人最多，说明多数人还是上微博的，只是粉丝少的网友更新微博的频率减少了，微博还是跟传统的论坛一样，少数人制造内容，多数人当观众。
阿里IPO后对我唯一的影响就是让我这个从不关心股票的人也去盯一下股票了！前两天关注的几个中概股大跌，这两天又集体疯涨。做这种钱生钱的事很容易让人变得浮躁，不安心做来钱慢的实事。
过去从需求分析到设计、编码、测试、上线、维护都由每家公司自己做，在云时代只是把最后两者交出去了，如果云服务商提供环境，自动化集成测试也适合交出去。维护分为机器和现有代码的维护，项目常常人员变动大，维护现有代码的成本也是很高的，我们只关注这个看似不起眼的代码维护问题。
现在的云服务提供商啥都参一脚，从硬件到OS、数据库、CDN、HTTP服务、安全、管理、监控、统计、性能分析，连日志服务都有了，其他做相关产品的第三方还有啥活路，等着被招安？比微软做杀毒软件还可怕……
租3台八核+16GB + 10T硬盘 + 4M固定带宽的云服务器，一年要8万块以上啊！http://t.cn/R74eFLS @阿里云 我没算错吧？那还不如直接去买实体服务器自己维护好。
看了一天的Azure、AWS、阿里云、Linode、DigitalOcean，前三者的价格基本上是后两者的两倍多，像我们这类没钱的创业公司基本上不能用前三者，一年的收入估计都不够支付租服务器的钱！
早上7点起床，晚上1点睡，创业没钱请不起人的话，能活活累死，从JS、HTML写到数据库再到JVM，样样插手，还得时不时放下手中的活看看哪里能租到便宜的机器，就差不用跑工商局了……其实坐在大公司拿着高薪喝喝茶不也挺好，赶上IPO了还能大赚一笔。
赚钱模式? 被问过N多次了，就在这了，天真不？在【两块钱买个电子书都还求盗版】的国情下， 每月收15-20块钱码农们舍不舍得掏？
微博上有些人你是没办法理解他们的言行的，他没关注你，你没关注他，只不过是间接转发或评论了你的微博，然后让别人觉得你跟他有什么深仇大恨一样……你不评论不转发我根本就从没注意到你好吧……有时这样的人真不是闹残喷子，有外企的有在搞研究的……喷我几句对我有何影响？别玷污你身后的公司和学校
我辞职出来的目的是想做NewSQL类型的数据库产品，去年也确实做出来第一个版本。今年从4月份开始怎么又突然不继续了呢，因为年初碰到几件事(与国内电信/通信行业的三家大公司有关)，让我很失望，即使花大力气做完也难卖出去，找我以前的老领导谈，他也不擅长卖数据库，心里发虚。
有些网友担心我是不是过得太惨了，你们的好心我领了:) 我是个喜欢追求自由的人，现在已经两年3个月不工作了，经济状况不好不坏，把银行存款取出来卖了股票至少还能在我现在的小城买个房，平时玩点自己喜欢的技术，下午到大学跑跑步，累了，到漓江边走走……没啥大的奢望，只希望家人平安就好。
咋一下来了这么多粉丝……泡了一天图书馆，弄了8本书回来，HotSpot VM不需要每天玩12小时了，减到7小时，剩下5小时玩点别的了：系统的学学数学和人工智能。时间太多，不找点事做只能无聊刷微博了。
HotSpot VM的扩展机制差了点，加了一些功能，修改或增加了挺多代码，只能自己维护一个分支了，还好只是内部用的工具。只要不出售也不用于生产环境也不对外发布二进制版本，不开源也符合GPL2吧？我看几个互利网公司都有自己定制的JVM。@RednaxelaFX
HotSpot VM的扩展机制差了点，加了一些功能，修改和增加了挺多代码，只能自己维护一个分支了，还好只是内部用的工具。只要不出售也不用于生产环境也不对外发布二进制版本，不开源也符合GPL2吧？我看几个互利网公司都有自己定制的JVM。@RednaxelaFX
有没有人有兴趣去考古一下: Java为什么当初要提供反射(Reflection) ？这功能我一直认为是弊大于利，能用到的场景不多，用起来繁琐，对编译器不友好，甚至在HotSpot VM内部的一些与字段、方法相关的回调事件中都不支持反射。
被 @左耳朵耗子 转发一条微博，来了近500粉丝，'耗子叔'不愧是人气王啊! 平时俺一年都涨不了这么多……然而，发技术微博也掉粉，所以说粉丝也要看是不是目标粉的，不做技术的其实没必要关注我，做技术的也要谨慎关注，例如我的技术观点就常跟'耗子叔'相反。
你所在的大学今年新生人数有没有显著增加？是否受高考改革的影响，我这的大学(区里top 5以内)从观察的粗略结果看至少比往年增加了1/3，食堂新增了一个，几个老食堂原先闲置的空窗都重新摆上菜了。每次去食堂吃个饭比去火车站还挤，真是大学生多如牛毛的时代！
小伙伴们，快来围观！我已经升级为V6新版微博，简洁的界面带来更流畅的体验。准备好了吗？和我们一起发现新的世界吧！升级猛戳:http://t.cn/R7vgnNI http://t.cn/R7PWMm5
不错，新版微博变QQ空间了……
我刚换了“飞鸟鱼”模板，好漂亮，你们都快来试试！ http://weibo.com/home?skinId=skin031
我刚换了“飞鸟鱼”模板，好漂亮，你们都快来试试！ http://weibo.com/home?skinId=skin031
Lealone的事务模型 http://t.cn/zQlVKkb 是通用的，只要底层存储支持多版本就行，如果有副本，底层存储自己要解决副本之间的一致性。这半年还是有不少网友询问，说明分布式事务还是有挺多应用场景的，只不过互联网公司不怎么在乎。
早就看透了国人骨子里存在的那种劣根性: 逆来顺受、缺乏血性、爱打嘴炮真要干就缩……从小学6年级到初中总共4年内独自跟某位垃圾老师和不合理的教育斗了4年，两拨同学有几个敢真的反抗的，老师说不给睡午觉时寝室没一个人，放学留到8点没一个敢出教室……只有我敢……直到中考那天还被垃圾老师破骂……
还是发技术类的吧……为了分析线程之间的关系，我修改了一些HotSpot VM一些代码，比如java.util.concurrent里的线程和应用线程间可能不一定使用传统的wait/notify机制，当你调用Future.get被阻塞时底层实际上是用park，另一个线程在完成时使用unpark，在VM层拦截一下就能找出这两种线程的关系了。
还是发技术类的吧……为了分析线程之间的关系，我修改了一些HotSpot VM代码，比如java.util.concurrent里的线程和应用线程间可能不一定使用传统的wait/notify机制，当你调用Future.get被阻塞时底层实际上是用park，另一个线程在完成时使用unpark，在VM层拦截一下就能找出这两种线程的关系了。
我目前怎么做代码分析? 1. 先从Apache之类的网站把Java开源项目的代码下下来，然后用定制后的Javac编译一次， 收集所有的静态数据(类继承关系、接口实现、字段和方法信息、不同类之间的关系等)。
【您的粉丝中有121个垃圾粉，真粉率为98%】若是被误杀，请找 @微博反垃圾
相比于计算机科学的其他领域(DB、OS、PL等)，最适合装X并且实用价值较低的，人工智能要进前3了吧，观看它的历史，起起伏伏，这两年深度学习又把它带火了，能持续否？人工智能更适合已经吃饱饭的人玩，加上好的实验环境，并且相信未来……
JNI、JVMTI即不灵活又难用，不想写太多C/C++代码，把扩展功能用Java写，然后在HotSpot VM中把内部信息当成参数并通过JavaCalls直接调Java代码，省事多了，开发效率更高，bug更少。这就叫逆向思维…… :)
不需要老拿贫穷说事，我经历过，并且现在仍然面对着好大帮贫穷的家庭，最难的真的不是改变自己并让其他人过得好一点，而是这社会很多事会让你很无奈。我弟今年4月底被人打到手断多处受伤，打官司的钱花了快3万了到现在还没开庭，有多黑你懂么？我姐8月份生了个女儿3天后意外死了医院没有一点责任。
没有经历各种挫折和打击怎么炼就强大的内心？
想在整个JDK中完全分析出线程之间是否存在关系实在太复杂，有时肉眼一看就明白的事，让机器去识别变得巨困难。比如main线程在调用并发包的Future.get()前，线程池中的某个线程提前完成了任务，那么main线程和线程池中的线程就不存在park/unpark关系，也没有用到synchronized，JVM层就感知不到了。
碰到一传销案例，地点在霸州，当事人被成功洗脑超过1年半，已有超过两人告知TA家人，但是TA家人不愿相信这事实，因为TA曾经是好孩子。如何破局？曾经也碰到过一些案例，中毒太深的，非得警察局捣毁窝之后才醒过来。
碰到一传销案例，中毒太深，如何破局？从我还没毕业，一直到现有，有关传销的例子就不不绝于耳，真是傻子太多骗子都不够用了！！！
碰到一传销案例，中毒太深，如何破局？从我还没毕业，一直到现在，有关传销的例子就不不绝于耳，真是傻子太多骗子都不够用了！！！
碰到一传销案例，中毒太深，如何破局？从我还没毕业，一直到现在，有关传销的例子就不绝于耳，真是傻子太多骗子都不够用了！！！
孩子打小真得接受点挫折教育，想要的东西来得太容易，就爱走捷径。----有感于最近某件事，说破了，对TA父母是个巨大的打击，不说，TA又会在错误的路上越走越远。
G1这个垃圾收集算法实现真心复杂，Orz...... 研究HotSpot VM的代码之后，应该不会有比它更复杂难读的软件了。看着写着，时常有一种失控的赶脚，为智商着急。[可怜]
为大型项目写构建脚本的人都是天使，干这种活就是在折寿……更新了一下OpenJDK8u的代码，重新构建一下，又挂了，艹，折腾哥两个多小时，原来是某几个@ JAVA_FLAGS_XXX@ 没替换成功，脚本天使又犯错了，那种make的错误提示简直就是shi一样无用，痛恨make构建风格……
Red Hat 的Shenandoah GC http://t.cn/8F4Ku55 号称是pauseless的，折腾一上午都跑不起来，还不支持Windows，也不支持32位，看来大家都玩64位了……
我可没有鄙视清华大学或国内其他大学的意思，要鄙视也轮不到我。虽说俺不是什么正规学院派，书和论文还是读了点的，翻翻国外经典教科书中的参考文献有几篇是国人的，但凡有点份量的论文中又有几篇？我不觉得搞个排名有多大意义，刷100篇引用数为1的论文还不如只发一篇引用数为100的论文。
清华大学很牛，嗯，确实牛，俺孤陋寡闻了，书白读了，论文也白看了，那么多牛人平均每月发1到1.5篇，俺却没看到一篇，俺错了，俺瞎了眼了，俺惭愧，俺不能跟牛人比，俺在有生之年若是走狗si运能发两篇论文就谢天谢地了。:)
去年第一次去北大清华校园闲逛，到现在基本上忘记是什么样了。学计算机的过程中我只记得有一本数据结构是清华的人写的，还是我考研时用的。除此之外，在我研究的几个计算机领域确实没有受过清华人的影响，这并不是刻意忽视或偏见，一切都很自然，要不是今天转发一条微博，我还真不知清华做了什么。
呵呵……
转【我为什么逃离科研】http://t.cn/zjAF1dn 没看过，原来两年前轰动过。选择什么不就为了图自个爽。
【问】: 为什么老外不爱引用国内发的论文？【答】: 因为论文中爱堆数学符号和公式呀。【问】: 堆数学的东东有错吗？【答】: 呃……好像没错耶，老外不背99乘法表的哦亲。【问】: 那按计算器啊？ 【答】: 是啊，他们都按计算器去了，按着按着就把计算器玩坏了，然后修计算器去了……
微博的计数器设计好奇怪啊，有些微博我不想公开了，微博计数还是算在内，比如现在是115条，点进去只有两条，明显就会给人造成误解。
我当然有关注VLDB，去年就关注过我的人肯定看到我多次提起过。清华的人说他们在VLDB上发了20多篇了，这是真事。我坦白，我一篇都没看过，我去年做数据库的方向是分布式事务和分布式SQL引擎，我所看过的论文和书没有引用到它们，或许引用了但没引起我的注意，要么是我粗心，要么是不相关或不够份量。
微博粉丝就像以前泡论坛刷星星刷钻石一样，刷够一定级别就不好玩了，说个话都得前后掂量是否伤着别人，所以，换个小号默默重新开始，无拘无束，哈哈……隐了，这大号以后用来发有用的新鲜的技术广告。
11月份代码分析网站还无法上线，还没有足够的机器来跑。以前做某系统，一天200多亿的调用日志都不敢直接存到HBase集群上，只能先按很小的时间单位合并成一条日志。代码分析系统生成的原始数据也差不多是类似的量级，接下来要想一些更好的数据编码方案和算法，必需做到一台机器就能支撑50+个开源项目。
被C/C++虐了半年后更懂得写Java是件幸福的事了！花了几小时重构半年前写的C/C++代码，性能提示了100倍以上，run久点也没见crash了。半年前我还是个C/C++菜鸟，写出的程序比Java还慢，不是忘记释放内存就是多放几次，string来回copy……莱鸟和老鸟写出的C/C++很容易看出来，Java就没那么明显，少犯错。
个人认为JVM这个领域未来可深入做的点已经不多了，看到三个方向: 第1. JIT编译器和多语言运行时框架，这方面Oracle Labs Graal VM做得不错: 包括局布逃逸分析、新的内联算法、Truffle语言框架，编译器领域还是能发现一些好的算法，但是毕竟发展这么久了，新算法的性能提升倍数通常不会让人吃惊。
@RednaxelaFX HotSpot VM要做到这一点感觉有点难: 探测当前方法的执行链上下文是一个循环或递归，然后执行到一定次数后就不再触发相关的JVMTI事件了(比如方法进入和退出事件)。我在用我的代码分析工具学习Cassandra的新代码时，取分析数据取好久，后来发现原因: 它在启动时运行一个10万次的循环……
大半年没跟进Apache Cassandra就落后一大截。把我的Cassandra-Research http://t.cn/zHkAPuV 也同步到官方的最新代码了。NoSQL往后一段时间就重点玩Cassandra了，然后再一边玩HotSpot VM，轮流在两个不同方向切换，懂了JVM内部实现之后再看上层的，心里更有底了。
DB-Engines里的数据库排名还是可以看看 http://t.cn/zlSGITm NoSQL产品已经进入理性期了，昙花一现或者取代RDBMS这两种极端说法都已经没人信了，Oracle、MySQL、SQL Server作为RDBMS第一梯队成员，同样MongoDB、Cassandra、HBase也是NoSQL产品中的第一梯队成员。
在Cassandra上扩展出一个符号JDBC规范的SQL引擎比HBase简单得多啊，因为它的CQL和SQL很相似，JDBC Driver都不用改动，在Server端稍微动一下代码就支持了。就花了半天，我就在Lealone上差不多完全支持CQL3了，只有select还不支持(因为要转换结果集)。用你熟悉的MyBatis、Hibernate来访问它多好。
Lealone的中短期目标：为HBase、Cassandra提供一个统一的分布式SQL与分布式事务引擎；长期目标：同时吸取HBase、Cassandra、H2 MVStore http://t.cn/zYD6N5T 这三者的优点做个新的分布式存储引擎，是实验、探索性质的，用于实现自己的一些新想法。 做开源项目真的就是just for fun, no fun no zuo :)
在线教育，哪怕是IT这个垂直分类的网站，真是好多啊(失败的比例好高)，我都不好意思说这半年也是做IT在线教育的，期间有两人让我做那种<<课程、老师、学生>>三板斧模式的在线教育网站，我没信心，一是成本太大，二是有太多同类了。还是走那种可通过工具自学的模式更好，只是技术难度很大，时间长。
阿里上市了，没等到上市我就早早出来了，陌陌也快IPO了，去年有机会去我也没去(因为不喜欢北京)，天上掉钱的事一生能碰到几次？你说我是个不喜欢钱的人？还是钱与我无缘？
宅到没朋友，也罢，呵呵……
#Cassandra# 是不是认为counter类型的字段不能出现在PK中？例如CREATE TABLE test ( id int, c counter, f1 int, PRIMARY KEY (id, c))会出现错误提示，但是只要在后面加上 WITH CLUSTERING ORDER BY (c DESC)就能绕过错误，然后把DESC再换成ASC试试？ 请叫我抓虫大师。
看到某IT男上过两次某台湾综艺节目，做硬件的，40多岁的单身大叔，看起来猥琐，瘦得只剩骨头，站一群帅哥中当小丑，被对面女人嫌弃、嘲讽。也不知是节目在做效果，还是他真沦落到这种地步？或者是他有意转行娱乐圈并乐在其中……
下一步考虑在Lealone中支持MySQL、PostgreSQL。分布式数据访问层(或者称proxy)可以移到server端，这有别于淘宝的TDDL(在client端，应用要依赖一堆jar包)，放在server端的好处就是性能更好，应用不会依赖它，升级只在server端升，原有的JDBC Driver都不需要改。
#Cassandra# 一个大项目如果不能按maven的组织方式拆开成不同的子工程说明它的代码就是一团浆糊。我试着为它的一些主要目录建立对应的子工程(比如io、db、cql3、gms、dht、utils等等)，结果发现几乎都在互相引用，这也说明了它的代码为什么可测试性那么差。
最近大量的重构了Cassandra存储层和H2 SQL层的代码，有重构大型项目代码的经验有助于发现现代程序设计语言缺少什么样的特性。刚好这两项目的代码都有个最大的毛病: 代码没有层次感，没有模块化，各个类的代码彼此依赖严重。比如H2的SQL解析、优化、执行都是混在一起的，与数据库的各类状态高度耦合。
Cassandra与HBase都使用ConcurrentSkipListMap来管理存放在Memtable中的记录，但不同的是Cassandra的字段不包含rowKey，而HBase包含，所以Cassandra在SkipListMap中的key是rowKey，value是用B-tree组织起来的整条记录中的字段，而HBase在SkipListMap中的key就是每个字段的key，value就是字段值。
抛开架构不谈(比如是master-slave还是p2p)，看一个数据库是否有亮点(或与别的数据库的区别)，最核心的就看三条: 1.数据在内存中用什么数据结构组织，保存到硬盘后的格式又是什么？2. SQL引擎用了什么优化算法(特别是处理join的情况)？3.事务和并发控制，支持什么样的事务隔离级别，有哪些锁？
快一年没跟进HBase了，HBase社区的开发进度还是这么慢，还没出1.0……人家Cassandra都开了3.1的分支了。准备看看是否支持HBase 0.96/0.98，版本不兼容不但应用不想升级，第三方的开源项目也得跟着开发一些兼容版本，无趣的体力活!
为什么Cassandra有这么多奇怪的设计，比如一条记录对应一棵B-tree（传统RDBMS是一个表对应一棵B-tree），又比如select中指定了rowKey(或者称partition key)后在where中还不允许包含其他普通非索引字段？这两问题是有相关性的，解答好了，你就能从一个很大的测面直视Cassandra的优点和存在的缺陷。
呵呵，好久不关注，刚到GitHub上面搜了一下某厂的XXXBase，删了啊……这是打算闭源的节奏么？……呃，开源到底好不好……想想最近Amazon号称比MySQL快5倍的东东不是没开源，都等着在云上卖RDS时干掉别家呢，开什么源？一但技术不仅服务公司内部，还可以当成公司的业务时，开放最新成果对谁有利？
HBase想要Schema-Free的，但是又想知道哪个值是属于哪个字段，所以它把字段名和字段值也存一块，Cassandra也一样，还更绝，还让你指定是否可以"紧凑”存放，就是在特殊情况下不带字段名。
开始提交Lealone CBase(向Cassandra HBase致敬)存储引擎的代码了 http://t.cn/RzU473V 一步步往上走，先放内存后落盘再到分布式。用了ConcurrentSkipListMap看看效果，简单的读写测试就比H2数据库的MVStore要快了(它的MVMap.put是同步的)。
真不懂为什么有些人对于某类或某个技术有恨，跟自己不喜欢的技术较劲个啥啊，一年、3年、5年……都不放过……看到烂的，我也会说，但是我不会变成某某技术黑或某某语言黑。好技术流不流行都值得看；流行的技术若是你觉得烂，你更应该去细看，这意味着你有机会和潜力去做得更好。
我开了4个线程，500万条记录，同时写入一个ConcurrentSkipListMap的性能与分开4个ConcurrentSkipListMap并发写入的性能基本上一样，这有点出乎我的意外。我以为把一个大表切开成几块能减少线程之间的竞争，如果换Collections.synchronizedMap，切开成多个就比一个性能要好。
ConcurrentSkipListMap的性能足够好了，开了最大1G的堆，线程个数是本机可用处理器个数，以Integer为Key，put次数随便都能达到每秒150万次，按key递增顺序get也能达到200万次，随机get能达到100万次。
并发库还是用这个领域的专家写的好，ConcurrentSkipListMap就是在JDK 1.6加入的，Doug Lea的作品，目前也是Cassandra和HBase处理内存数据的数据结构。想想H2数据库的作者，花了一整年开发MVStore存储引擎，精力都放在MVMap上(基实就是多版本的B-Tree)，性能还不如JDK自带的ConcurrentSkipListMap。
RDBMS可以从Cassandra学到一些东西，如果对字段限制个数，允许为NULL的字段不多或不在乎那点内存，可以抛弃B-Tree了。通过 ConcurrentSkipListMap能实现无锁编程。SkipListMap里Key是主键或索引字段，Value是整条记录字段数组的一个Holder，在更新字段时copy一份老的来修改然后通过ＣＡＳ更新Holder。
就算没人用，完整的开发一个数据库(从client到自定义协议，再到server到SQL引擎、事务、存储、IO层)，也是件很好玩很的事，很锻炼人的系统整体设计与编码能力。如今，在JVM平台上一个人开发一个单机或分布式数据库已经是件简单的事，从网络框架到并发库，再到压缩算法都有很成熟的组件可直接用了。
看了某厂员工在华师大学报上发的论文讲xxBase，想起两年前跟某人吵，对方总是抨击【HBase默认情况下没有对rowKey进行hash后存储，从而造成热点】，讽刺的是某厂的xxBase不也按rowKey的自然序和区间来分tablet，有啥本质区别呢？另外，新版本又要实现多主可写了，亲，直接做到像HBase RS那样都可写吧。
何必纠结每行代码是否是自个一行行写出来？能用现成的组件就用现成的，能改代码就改别人的。看一个技术产品我首先不会看它的代码是否从零码起，而是看它用了什么新想法新算法，没有新意那真的就是在重造另一个轮子了，还是蛮干，这就是十足的【码农】(多含贬义)。
难得睡次午觉，被电话吵醒，又一件……人生就是这样，不知道哪天就挂掉了，活着时就好好活，活得开心点……2014快点过去吧，我连名字都跳到2015了……
小时候我们这死于癌症的人并不多，最近８年从家人、村里人，身边朋友同事那看到的听到的死于癌症的占了90%以上，我爸６年前不到60岁因癌症去世; 我小奶奶去年也因癌症去世，70多岁; 我爷爷上周进医院，今天被确诊出癌症，81岁; 村里近几年去世的中老年人多是癌症。原因是什么？我也不知道。
3个月前，要是医生多注意一下细节，提前一天发现异常我那出生不到4天的外甥女就不会死，医患关系紧张，医生医院怎么能撇清关系，天朝的医院里有大量连专业技能都达不到要求的水货。医生应该是受人尊重的、技术娴熟过硬的、高收入的群体，不应存在水货，宁少，勿滥。
若是哪天不想玩计算机了，写代码写腻了，我会毫不犹豫从零开始选择另一个方向: 医学！考个医学院校，只要提供学习、实验环境即可。这可能也是像我这类技术控的特有毛病: 若是不了解技术细节和内部实现就不自在。不了解自己身体的运作过程，加上天朝目前的医疗现状，对医院、医生几乎没有任何安全感！
计算机这领域以后只关注JVM/编译器和数据库就足够生存了，把人工智能的书还给图书馆了，不学了，人类连自己的大脑所知都非常有限，玩什么人工大脑，借点医学科普类的书，在业余时间看看实用价值更高。
年轻时学东西是为了攀比，彰显自己牛B，工作几年后学东西是为了生存，30岁学东西是为了兴趣，35岁以后学东西除了兴趣之外更要多想想对身边的人是否有帮助。
HBase应该学习Cassandra，做自己的文件系统，而不是总是依赖HDFS，NameNode太重，做成HA后变得极度复杂，NameNode这种东西本身就不应存在。RegionServer作为单行记录的读写关口，学一下Cassandra使用并行行复制是件容易的事，同时又避免了Client与副本所在节点直连，这又是简化分布式事务的关键。
某厂的xxBase那不叫读写分离，除非应用不会去读最近添加或修改的数据……某厂最近老是在打广告的某产品，呵呵，说巧不巧，负责MySQL、Oracle读写分离那块代码的主力码农，俺曾经就是其中之一。只在写库刚刚写入数据又马上读，为了重用写链接时才从写库读。(这还是为了满足ibatis一个特殊功能加上的)
玩了大半年HotSpot VM，找个吵架的人都难，因为研究的人少，多个人多个伴，大家都很温和，也谈不上什么竞争。数据库领域就不一样了，不但用的人多，做的人也多，个个都以为自己有几把刷子，擦枪走火是常态。
某厂曾是国内Hadoop/HBase的标杆，忙着在内部造轮子后，去年还活跃的那一批技术人一下消失了，剩下活跃的多是广告/招聘户。事实证明大厂玩不玩对开源技术影响不大，HBase相比两年前在国内更普及了，微博搜出来一大堆，两年前我在普及0.94时还少有人玩；Cassandra在整个数据库行业中的排名都到第9了。
现在的数据库开发人员、DBA，不去了解Cassandra｜HBase｜MongoDB是不称职没追求的。
微博点赞后的消息通知真是个脑残设计，对于有强迫症的人，看着右上角那红色消息提醒不点嘛又看着不顺，点一下嘛又毫无价值，浪费５秒钟的时间。请问如何屏蔽掉点赞提醒？我实在找不到在哪设置……
我不推销任何NoSQL开源产品，只是把我正在研究的技术时不时在微博上分享一下，即说烂也说好。我也不会推销我自己做的开源项目，要是觉得可以放心用你就用(至少目前还不能放心用)，我不会给出一年包换三年包修之类的任何承诺，但是会尽力做好，总而言之: just for fun, no fun no zuo, you go on。 :)
类似淘宝TDDL这类富客户端数据层的一些先天性缺陷，列几条，想到再补充: 1.因为把功能都堆到客户端，所以新增功能越多就会常常要发布新版本导致应用要频繁升级，引用jar包越多跟应用的冲突就越大；2.SQL解析优化在客户端做了一次，在数据库server端又做一次，降低性能；
目前的NoSQL并不需要客户端的数据层或者中间Proxy，这类东西是用来弥补传统RDBMS（像Oracle、MySQL）在sharding方面的短板，未来跑在云上的改量版RDBMS也不应把sharding的缺陷推给上层去做，应用察觉不同数据库是一台机器组成还是多台组成，数据库能根据主键或唯一索引自动均衡数据。
目前的NoSQL并不需要客户端的数据层或者中间Proxy，这类东西是用来弥补传统RDBMS（像Oracle、MySQL）在sharding方面的短板，未来跑在云上的改量版RDBMS也不应把sharding的缺陷推给上层去做，应用察觉不到数据库是一台机器组成还是多台组成，数据库能根据主键或唯一索引自动均衡数据。
存在一种即能像HashMap一样随机get又能像排序好的List那样随便scan的算法吗？连PostgreSQL这么学院派的数据库都把索引分开成Hash和B-Tree索引，扩展到分布式系统也一样，各种NoSQL也没有发明即适合get又适合scan的索引。也许早就有学究发过论文证明不存在这样的算法了。
不管是分布式NoSQL/NewSQL还是重新发明的分布式RDBMS都不需要在前面再挡个Proxy，这是脱下裤子放屁，多些一举。目前像HBase/Cassandra这类NoSQL，其实已经慢慢变成分布式RDBMS了，分布式事务已经有了一些方案，SQL只是需要在功能上再完备一下，join稍微难一点(Cassandra通过聚簇列的方式缓解了一下)。
有网友问起代码分析的那个项目怎么还没发布?嗯，让大家失望了，目前不是最好时机，还不适合上线运营，但还会默默地做，等待时机，开源出来不太可能。现在有一半的重心是做数据库，因为现在是最好时机，这个是开源的，不管用不用，至少我在微博上提供了另一角度让你鉴别不同的技术。
说得好像我成了各种技术黑一样。:) 只是因为快一年不做数据库了，最近才密集脑补，看看国内国外同行做成什么样了。MySQL目前不是我的重点，不过某厂的MySQL团队确实少了些即有深度又有远见的人。不“黑”了，“黑”太多其实也是帮别人，对我无益。别人做得不够好，就是你的机会，就如NoSQL之于RDBMS。
噗~~~原来通过Handler为MySQL开发个存储引擎这么简单，用JNI把MyISAM或InnoDB简单包一层，然后把HBase或Cassandra包进去，MySQL解析完SQL后，转到JNI，接着调Cassandra分发数据，再写本地MyISAM或InnoDB，这一招才叫釜底抽薪……让你们丫没Proxy可撸，连撸binlog的机会都没有……[右哼哼][左哼哼]
MySQL 5.6好多的项目哇！VS里面显示122个！我要是玩起MySQL，是不是很多人要着急了。噗~~~
深入、长篇大论讨论技术问题还是专业群组好，不知道国内在数据库开发这方面有没有类似HLLVM这样的讨论群组。我不是数据库领域的老人，正式跨足NoSQL/RDBMS顶多也就3年时间，所以连ITPUB这类网站我都没有注册账号也很少看。
如今，各类公司之间的竞争谁说不是战国时代呢，技术人员也如战场上厮杀的将士，【在一起时是战友，分开了是对手】，没什么对与错，各为其主，各为各的利益而已。
Lealone的分布式事务模型 http://t.cn/zQlVKkb 我必需说是目前已发表的算法中最好的，此文只是透露了70%的内容（要看细节，你需要看代码）。性能理论上跟单机事务接近，只是在第一次查询时多了一次效验(然后就不需要了)。
分布式环境下，目前没有发现哪种算法能解决【任意一次join都不需要网络传输】, 我想未来也很难出现这种通用的算法吧。现在算法的优化原则只是尽量减少网络传输，方向无非是从低层存储着手，把相关数据尽可能放同一节点，或者从SQL引擎着手，算出传输哪个表或哪些记录的代价更小。
不要在我微博评论或其他地方艾特阿里系的人了，他们不会回的，早就把我无视了或拉黑了。so, 想看热闹不闲事大的你们，省点心吧~~~ :)
行了，连续一周脑补国内国外数据库同行的最新进展，在微博上刷屏几天，其实比写代码还累。总结下来，重新做数据库更有信心了，接下来专心coding了，Lealone 1.0 指日可待，看我一个人如何挑战一个团队吧，嘿嘿~~~
@阿里千路 我做的东西跟OB有一些竞争关系，你刚好又去OB团队，怎么聊都别扭。有关事务，之前我都说了【OB若是变成多主可写后，如何路由写请求到不同的写库又成了问题，是写库又按rowKey分区吗(此时和读库功能重叠)？如果不分，同一条记录可能跨越多个写库和一个读库，想想都觉得可怕。】只是你没领会。
技术争论是好事，但是最无法忍受别人一上来就觉得TA好像更懂一样，我有时也会无意间犯这种低级错误。现在，如果讨论一些专业性很强的问题，我还是会礼貌性的问一下对方的研究领域是什么，否则讨论起来很累，还不如不讨论。
Lealone 1.0的重点是做新的CBase存储引擎，使用微内核架构，然后得到3种不同的运行模式: 嵌入式、C-S模式、P2P集群模式，每种模式都可以选择是纯内存的，还是需要持久化到硬盘的。目前已经初步完成前两种模式的内存存储，这种架构效果非常不错，很容易进行代码和性能测试。
在天朝，作为一个33岁的老码农，还能像我这样保持对技术有狂热兴趣的已经非常罕见，比我小的、跟我同龄的，很多都已转成PPT高手或会议高手。我的经验告诉我，技术吵架不可怕，可怕的是在吵的过程中你指出了别人的不足，对方却很吝啬不愿提示你错在哪，技术吵架的目的是为了提高彼此的技术水平。
Spark出来后，Hadoop最有价值的恐怕就剩HDFS了，还好Spark社区没在分布式存储这一块发力，类似Cassandra, HBase这样的东西就是Spark的数据来源之一，简单的查询(比如经过一次简单数据处理就能得到结果)，在Spark上做并没优势，所以面向OLTP的SQL引擎才是最合适的。
总有一些人看到其他人多会点技术就觉得“酸”，好可悲~~~学技术最初级的目标是找份工作吃饱饭，然后就应换一种玩乐的心态，玩技术让自己爽，谁管别人是否牛B，不爽了就换，我已经玩了很多不同类型的技术了，每两到三年就换点新玩法，每次进入新领域时或多或少总会被这领域的“老人”喷，那又怎样~~~
像俺这种没啥物质追求的人在“成功人士”看来就是个loser：没房没车，30好几了还没结婚。可是我觉得我好成功好自在，每天睡到自然醒，每天做我想做的事，想说啥说啥，不装孙子不求人不用看人脸色，哪天钱花完了，再工作个两三年，若不出现大的意外，又能玩乐10来年。
认识一个人，将近40岁了，未婚，画画的，我们都叫他艺术家，而且是穷艺术家，也许在他死后他的画都不值钱~~~有些人就能脱离世俗追求自己想要的，哪怕被别人说得一文不值~~~
基于P2P的架构在工程实现上确实要复杂一些，举个例子，在Cassandra中启用vnode时，如果同时启动两个seed节点，有可能这两个节点同时得到相同的Token，猜猜会出现什么情况？Cassandra如何解决？
费了两天劲才勉强把Cassandra与集群相关的代码剥离出来，还跑不动~~~再次吐槽Cassandra的代码层次、模块化，设计得不是一般的烂~~~官方哪一天要是真想重构，不吐血才怪，技术债，总有一天要加倍还的。
集群节点上下线、数据迁移，这种东西看上去简单，真要实现自动化要考虑非常多的中间状态，如何在代码中调试对应的流程呢，Cassandra支持通过http的方式使用JMX，mx4jTool这个工具可以在web界面上操控JMX，比如Cassandra的StorageService提供了一个decommission的JMX操作，点一下就能debug对应代码了。
研究一个大型系统，最爽的那个阶段是:从客户端发起一个读写请求直到每个字节写入硬盘， 闭着眼睛你都能在大脑中把完整的代码流程run一遍，这种感觉是看书和看论文很难体会到的。人自身也是一个复杂的系统，要是哪一天我也能理清我自身的运转过程那是多少美妙的一件事！
上一次辞职后，我玩了１５８０多天才重新工作，这一次辞职，我已经玩了将近９００天了。技术宅只需要一点钱就能活，如果身边的人不出大事的话，把通货膨胀算在内，我至少还能玩５年~~~当然，我不是在过渡宣扬自由主义和独身主义，我也常要面对各种世俗问题，照顾好家人的同时，选一种适合自己的方式。
时不时有人想找我创业，然后成为千万富翁，去美帝那边敲钟~~~你们的激情我很赞赏，勇敢去闯吧~~~我，早已心如止水，只想过点自己想过的生活，平静，不代表对生活失去希望，而是看清了方向。
之前介绍Lealone名字的由来时说到: 【来自在淘宝工作期间办公桌上那种叫绿萝的室内植物】然后有网站和网友说Lealone是淘宝开源出来的项目，有人是冲着淘宝的名头去看，也有人起哄说淘宝开源出来的多数都烂~~~我必需说明的是: 这个项目跟淘宝无关，是我辞职之后才开始做的，目前主页上已去掉淘宝两字。
噗~~~看到友人画了几张架构图，心痒，我也来一张Lealone的，这才是做数据库的终极目标: 在应用看来就只有一个数据库，谁管你后面是1台还是1百1千台~~~妈妈再也不用担心什么叫Proxy、数据层、读写分离、主备切换、分库分表了~~~
看私信，某大厂的人说贵厂对Lealone和我都比较感兴趣，诚邀加入~~~不管是真是假，还是要另发微博多谢好意，可惜我并无重新工作的打算。在家做开源就图个自由自在，若做得好有人用就是对我最大的褒奖，当然也不会拒绝企业赞助，但前题是不能影响我做任何有关项目发展方向的决定。
H2 http://t.cn/RzmihZZ 也是个RDBMS，国内玩这个的人不多，Lealone目前有超过一半的代码都是从它那拿来的，如果有人说我拿别人的代码我不会介意，反而会骄傲的对别人说: 我最擅长利用现有资源花更少时间做更有新意的事。另外，再次推荐RDBMS的同行找两个流行的NoSQL产品深入学学，否则容易思维僵化。
不想出门，用支付宝转几百块钱到银行，一个上午都到不了对方的账户，还收手续费~~~出门从ATM上取现金，通过无卡存款搞定，不收手续费，来回半小时~~~还有那一堆安全控件的后台服务进程就不多说了，上完alipay我就全kill掉~~~手机版的即费电又浪费流量~~~真搞不懂支付宝怎么没有像样的对手！
手机上的流氓APP更多，我每月只有30M的流量，就算我不启动任何APP，每月也至少花掉20M以上的流量，后来我只留了两个APP，一个天气预报一个QQ，每月不到5M的流量。特别点名吐槽豌豆夹，乱七八糟的通知，以前我的手机还能直连电脑，装了豌豆夹后就只能用豌豆夹连，卸了就不行了，到现在我都还在烦这个事~
我也有保守的一面，比如我从2011年才花了3500多块钱买了台智能手机，一直用到现在。平常的主要用途还是用它来节省短信和电话的费用，我不会用手机看书学习，也不会用它看电影。没人怀疑现在是移动时代，但手机不是全部，谁愿当低头一族就让TA当，你有你的自由，我有我的习惯。
我天朝子民最能忍，制度上的东西咱就不说了，延伸到软件这行业还是能反应出那种劣根性: 只要装的软件没把你的小JJ暴露到网上都能忍。我就有怪癖: 喜欢看手机或电脑上运行的服务，若是面生的就关掉。我连Windows都一直是裸奔，都像我这样也不好，真如此，某数字公司早转型了……
奴性，这词虽不好听，但又不得不承认它是如此准确！
一个开源产品，连官方文档都没看完大半，然后匆匆忙忙上生产环境，出了问题团团转。若是不能掌控就先不要玩，说回这Cassandra的例子，在对它不了解的情况下，仅通过google就能解决问题，不正说明它不难掌握有大量资料可查吗，实在不行还能翻代码。
Gossip协议没有想像中那么恐怖，首先节点之间的数据传输并不是全量，而是增量，互通有无。如果有10个节点，每一轮时间间隔是一秒钟，平均每次会有5对节点在说悄悄话(废话不多，只说3句)，比相一些M-S架构通过发心跳包，1个M，10个Ｓ的话，每一轮都会有10对节点在通信。
Cassandra不会取代Redis，基本上不相关的两个产品。NoSQL也不会取代RDBMS，一些对NoSQL产品有排斥心理的人，你会发现要么对方的主业是围绕RDBMS做事，要么纯粹就是懒得学习，这类人特别乐意看到别人用NoSQL掉坑里。【没有银蛋，但是带技术偏见的人倒很多】。忘了说了: 俺同时玩RDBMS/NoSQL。
又重构了一把，我还是偏爱把测试代码独立出来当一个子工程，特别是像我这种３个存储引擎同时支持公共的SQL功能又各有扩展时，都放一起会导致大量jar冲突，特别是HBase和Cassandra两家就像死对头一样，不能同时依赖它们俩。
搞不懂支付宝怎么玩分布式事务，直到现在这个转账事务还在处理中，昨天银行查不到转账金额，我以为失败了，然后直接去ATM转，今天对方收到了600块钱，而我原本只是想转300块钱，嗯呵呵，还好是转给家人的~~~
大公司总有人为它庇护，不谈逻辑。我确实SB，手机转不收费，电脑转收费反而选电脑(不就为了花钱买个放心)，以后用支付宝的服务记住了：免费的比收费的好。吃了亏不要找大公司理论，更不要公开批评。随便一说就被戴上阿里黑的帽子~~~
说几句阿里对我有什么好处，再怎么说我也是前员工，再怎么说我手上还有那么一丁点股票。说支付宝，就是用得不爽我才说，说几句TDDL、OceanBase就好像我有啥险恶用心一样，我只不过是宅在家当个自由人……我巴不得有人来批我的Lealone，求之不得。做技术的，说得对你想听就听，说错了就当笑话。
一种常见的观点是：保持DBMS简单，把Proxy、Sharding抽出来放到独立的一层。真的么，单机的MySQL简单么？把事务、Proxy、Sharding也集成到Cassandra，代码量充其量也只不过是单机MySQL 5.6/5.7的2/5。好的架构不但能容纳更多的功能，还能减少代码量。
为不同存储引擎设计一个统一的前端系统后，我发现只要架构设计灵活了，其实每个大组件理应是可以自由搭配的，不但存储引擎之间可以自由替换文件系统；把事务从存储引擎抽出来也更灵活；Sharding的方案可以用DHT(分布式hash表)也可以替换成全局有序范围表；即可以是P2P，也可以是轻Master-重Slave。
我比较倾向在JVM平台上做各类数据库产品，开发效率高可用资源多，而不是传统的C/C++平台，因为性能早已不是什么大问题；Golang还太年轻，不如JVM平台成熟稳定；离线分析我现在不插手，这是Spark社区的主战场，我只想做OLTP，未来会考虑做一些跟Spark结合的东西，Hadoop已经不怎么关注了。
Cassandra的CQL3引擎从零开始，做了3年了，连一些基本的表达式化简、谓词等价转换都没做，连OR都不支持，所以要评价这东西顶多给60分。SQL或类SQL引擎是个深渊，永远都做不到100分的，最经济的办法就是从现有的开源产品中找现成的或在原有基础上改造。
Phoenix http://t.cn/R76PTh7 这个HBase SQL引擎自从入了Apache后确实吸引了很多目光，一年多不关注了，粗略翻了一下4.2版本的代码，我的天，这代码规模跟我实现Lealone(HBase SQL引擎 + 一个分布式RDBMS)旗鼓相当了。不得不说HBase这两年搞得越来越复杂臃肿，我都不想跟0.98/1.0了。
Lealone也是使用one session/connection one thread的模型，简单可靠。要是一个线程同时服务多个session，如何处理事务这是个大问题。在集群环境下，连接数并不是大问题，因为每个节点可以分摊。若同时打开的session数真达到了10万级，应该先从前端HTTP服务器或应用服务器找问题。
对于某一条记录多个副本之间的数据版本和一制性问题，Riak使用vector clock来解决，Cassandra使用last write wins，HBase与前两者都不同，牺牲一点点可用性，对某一条记录所有副本的读写都通过一个单一入口，也就是串行化了，Lealone为了简化事务的实现，也跟HBase一样，所以自然就是全局有序了。
做软件的，你就应该指望现在的硬件发展得慢一点，这样你才有活路。要是哪天访问硬盘的速度跟内存一样快了同时价格也非常便宜了，网络延时不是问题了，还用那么多软件算法研究人员做什么，使用最差算法得到的响应时间是1微秒，最好算法是1纳秒，对应用来说只用最差的算法就足够好了。
Spanner里借助TrueTime来实现外部一致性，这就好比10:00时在MySQL里启动一个事务，然后这个事务去访问PostgreSQL里的数据也只能看到10:00前的。这种功能当然可以通过一个全局的时间戳服务器解决，就是性能慢。可是真的有多少应用有这么强的一致性要求，我目前的做法是控制本地事务跨不同节点读写。
JTA规范里有个Xid，能唯一标识一个分布式事务，但这个东西似乎没有被支持MVCC的数据库当成版本号，例如H2这个数据库只是把它当成事务名，更新记录时还是用内部的计数器生成版本号，ＭySQL的JDBC Driver也是把它转成XA PREPARE xid字符串，可见2PC虽然有全局Xid，但是落到本地事务时并不适合当版本号。
确实，很少有人能完整讲清2PC是如何实现的，就连做数据库的人都不一定清楚，因为在最常见的情况下2PC都要涉及３个角色: 事务管理器、数据库驱动、数据库。事务管理器才是控制中心，这东西多是放在应用服务器上面的。
在分布式数据库中，优化insert into t1 select * from t2这种句型，使用Cassandra 分布式hash表(DHT)的方案要比HBase全局有序范围表更高效，因为使用DHT时可以把这种SQL直接发到各个节点上，不用先select再insert，而HBase就不行，因为t1和t2就算rowKey相同也可能在不同节点上，需要先select出来。
想到一种支持MySQL、PostgreSQL的新方案，不需要把JVM内嵌进去，不需要理解它们俩的内部代码，就是性能稍慢一些，这种方案还是直接依赖JDBC Driver，Proxy跟DB实例是一对一的关系，但是是通过localhost的方式来访问DB，复制、Sharding、分布式事务都由Proxy接管，每个DB实例都可读写，没有主从之分。
JDK里抛异常消息抛得最无用的，java.net.BindException算是其中之一: 不告诉你地址和port是什么。没有经验的程序员往往把它忽视了，友好的做法是捕获它再抛一次。HBase里那个bug直到现在还在，明明在RPC那里捕获了，然后在HMaster.constructMaster那里又屏蔽了，然后就见到Address already in use
分布式hash表(DHT)在碰到范围查询和范围更新时真得跪了，范围更新还勉强能做，一碰到范围查询，好不容易弄了几个副本增加可用性，这种【可用性】反而变成了累赘，因为当路由SQL时通常要发给集群中的所有节点，每个副本所在节点都要小心扫描，合并后的结果又必须只能包涵一个记录副本。
Docker太火了，了解得还不多，确实值得学学，我只是觉得JVM搞多租户、数据库也搞多租户，连应用服务器都搞多租户，这么多怎么理得完~~~要是在OS层真能一劳永逸把问题解决了，上层软件就没必要做相关的功能了。
基础技术通常就是指计算机科学里那些有深厚理论背景的技术，比如操作系统、数据库、编译器与程序语言设计等等。我在想，一个技术人员如果一直长久地做下去，也许最后会在一两个基础技术领域内定下来做到老。不是这种结局的技术人员要么对技术没感觉了转别的方向，要么最后走向管理的路。
2014最后一天，技术方面没太多总结，只是更加确信未来两年自己的研究方向还是数据库和JVM(归入编译器和程序语言设计与实现这个方向)。明年的重心还是继续做与数据库和JVM相关的两个产品，业余时间学点医学知识。
